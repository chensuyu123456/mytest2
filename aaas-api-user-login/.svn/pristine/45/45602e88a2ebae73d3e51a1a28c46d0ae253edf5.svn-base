package com.shellshellfish.account.controller;


import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import javax.validation.ConstraintViolationException;
import javax.validation.Valid;
//import com.shellshellfish.account.Validation.Max;

import com.shellshellfish.account.commons.MD5;
import com.shellshellfish.account.exception.UserException;
import com.shellshellfish.account.model.PageSchema;

import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.shellshellfish.account.service.AccountService;
import com.shellshellfish.account.service.ResourceManager;
import com.shellshellfish.account.service.SchemaManager;


@RestController
@RequestMapping("api")
@Validated
public class RestApiController {
  //public static final Logger logger = LoggerFactory.getLogger(RestApiController.class);

	@Autowired
	AccountService accountService;
	
	@Autowired
	ResourceManager resourceManager;
	
	@Autowired
	SchemaManager schemaManager;
		
	@Bean
	public ResourceManager resourceManager() {
		return new ResourceManager();
	}
	
	@Bean
	public SchemaManager schemaManager() {
		return new SchemaManager();
	}
	
	@RequestMapping(value = "/register.json", method = RequestMethod.POST)
	public ResponseEntity<PageSchema> registerschema(
			//@Valid @NotNull(message="not null") @Max(value=20) @Min(value=1) @RequestParam(value = "id") Integer bankid
			){
		   
		   PageSchema pageschema= schemaManager.getSchemafile("register");
		  //System.out.println(pagestr);
		  return new ResponseEntity<PageSchema>(pageschema, HttpStatus.OK);	
    }
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public ResponseEntity<Map> registerres( //register resource
			//@Valid @NotNull(message="not null") @Max(value=20) @Min(value=1) @RequestParam(value = "id") String bankid
			@RequestParam(value = "telnum") String telnum
			){
		   
		  HashMap<String ,Object> rsmap= resourceManager.response("register",new String[]{telnum});
		  //System.out.println(pagestr);
		  return new ResponseEntity<Map>(rsmap, HttpStatus.OK);	
    }

	@RequestMapping(value = "/pwdsetting", method = RequestMethod.POST)
	public ResponseEntity<Map> pwdsettingres() {
		HashMap<String, Object> rsmap = resourceManager.response("pwdsetting", null);
		return new ResponseEntity<Map>(rsmap, HttpStatus.OK);
	}

	@RequestMapping(value = "/pwdconfirm", method = RequestMethod.POST)
	public ResponseEntity<HttpStatus> pwdconfirmres(
			@Valid @NotNull(message = "not null") @Max(value = 20) @Min(value = 1) @RequestParam(value = "id") String bankid,
			@Valid @NotNull(message = "密码不能为空") @Size(min = 8, max = 16, message = "密码长度至少8位,至多16位，必须是字母 大写、字母小写、数字、特殊字符中任意三种组合") @RequestParam(value = "pwdsetting") String pwdsetting,
			@Valid @NotNull(message = "密码不能为空") @Size(min = 8, max = 16, message = "密码长度至少8位,至多16位，必须是字母 大写、字母小写、数字、特殊字符中任意三种组合") @RequestParam(value = "pwdconfirm") String pwdconfirm) {
		if (accountService.isSettingPWD(bankid, pwdsetting, pwdconfirm)) { // 密码修正正确
			return new ResponseEntity<HttpStatus>(HttpStatus.OK);
		} else {
			return new ResponseEntity<HttpStatus>(HttpStatus.UNAUTHORIZED);// 未授权用户
		}

	}	
	
	//忘记密码下的获取验证码
	
	@RequestMapping(value = "/verifycodeget", method = RequestMethod.GET)
	public ResponseEntity<HttpStatus> verifycodeget(@RequestParam(value = "telnum") String telnum){			
			
		  //nedd alisms interface to get sms
		  //send  sms to telphone 
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);	
    }

	//忘记密码下的密码设置
	@RequestMapping(value = "/topwdsetting", method = RequestMethod.POST)
	public ResponseEntity<HttpStatus> topwdsetting(
			@Valid @NotNull(message="电话不能为空") @DecimalMax(value="99999999999",message="电话长度必须是11位的数字") @Size(min = 11, max = 11,message="电话长度必须是11位的数字")  @RequestParam(value = "telnum") String telnum,
			@RequestParam(value = "verfiedcode") String smscode)
			{
		
		if (accountService.isSmsVerified(telnum,smscode))
			return new ResponseEntity<HttpStatus>(HttpStatus.OK);
		
		return new ResponseEntity<HttpStatus>(HttpStatus.UNAUTHORIZED);
	}
	
	@RequestMapping(value = "/forgottenpwd", method = RequestMethod.GET)
	public ResponseEntity<Map> forgottenpwdres(@RequestParam(value = "telnum") String telnum){			
			
		   
		  HashMap<String ,Object> rsmap= resourceManager.response("forgottenpwd",new String[]{telnum});
		  
		  return new ResponseEntity<Map>(rsmap, HttpStatus.OK);	
    }

	
	// login schema
	@RequestMapping(value = "/login.json", method = RequestMethod.GET)
	public ResponseEntity<PageSchema> loginschema(
			//@Valid @NotNull(message="not null") @Max(value=20) @Min(value=1) @RequestParam(value = "id") Integer bankid
			){
		   
		  PageSchema ps= schemaManager.getSchemafile("login");
		  //System.out.println(pagestr);
		  return new ResponseEntity<PageSchema>(ps, HttpStatus.OK);	
    }

	@RequestMapping(value = "/loginverify", method = RequestMethod.POST)
	public ResponseEntity<HttpStatus> loginveirfy(
			//@Valid @NotNull(message="not null") @Max(value=20) @Min(value=1) @RequestParam(value = "id") String bankid
			@Valid @NotNull(message="电话不能为空") @DecimalMax(value="99999999999",message="电话长度必须是11位的数字") @Size(min = 11, max = 11,message="电话长度必须是11位的数字")  @RequestParam(value = "telnum") String telnum,
			@Valid @NotNull(message="密码不能为空") @Size(min = 8, max = 16,message="密码长度至少8位,至多16位，必须是字母 大写、字母小写、数字、特殊字符中任意三种组合")  @RequestParam(value = "password") String pwd
			){
		   
		    Pattern p = Pattern.compile(  
		            "^(?![A-Za-z]+$)(?![A-Z\\d]+$)(?![A-Z\\W]+$)(?![a-z\\d]+$)(?![a-z\\W]+$)(?![\\d\\W]+$)\\S{8,20}$");  
		    Matcher m = p.matcher(pwd);  
		    if (m.find()) { //need pwd check  
		        //int kk=1;  
		    } else {
		    	throw new ConstraintViolationException("密码长度至少8位,至多16位，必须是字母 大写、字母小写、数字、特殊字符中任意三种组合",null);
		    }
		    
		   
		   
	         //passwd:abccd4djsN-999
		    //CellPhone:13611442221
	        
	      //  User targetuser = userRepository.findByCellPhoneAndPasswordHash(user.getCellPhone(),user.getPasswordHash());
	        if (accountService.isRegisteredUser(telnum, MD5.getMD5(pwd))) { // 是已登记的用户
		       return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	        }
		    
	        return new ResponseEntity<HttpStatus>(HttpStatus.UNAUTHORIZED);//未授权用户
	       	
    }
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public ResponseEntity<Map> loginres(@RequestParam(value = "telnum") String telnum)
	{
		   
		    HashMap<String ,Object> rsmap= resourceManager.response("login",new String[]{telnum});
		    return new ResponseEntity<Map>(rsmap, HttpStatus.OK);	
    }
	
	@RequestMapping(value = "/tosmsverification", method = RequestMethod.POST)
	public ResponseEntity<String> tosmsverification(			
			@Valid @NotNull(message="电话不能为空") @DecimalMax(value="99999999999",message="电话长度必须是11位的数字") @Size(min = 11, max = 11,message="电话长度必须是11位的数字")  @RequestParam(value = "telnum") String telnum
			){
	         //passwd:abccd4djsN-999
		    //CellPhone:13611442221
	        
	       boolean flag= accountService.isRegisterredTel(telnum);
	       if (flag==true) {
	    	   throw new UserException("100","抱歉，此电话号码已注册");
	       }
	       
	       return new ResponseEntity<String>("/smsverification?telnum="+telnum,HttpStatus.OK);//注册OK,return target url
	       	
    }
	
	
	
	
}
